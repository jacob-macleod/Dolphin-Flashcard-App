"""Provides the abstract class for the database
"""

from abc import ABC, abstractmethod
from database.handlers.flashcard_set import FlashcardSet
from database.handlers.flashcards import Flashcards
from database.handlers.folders import Folders
from database.handlers.read_write_access import ReadWriteAccess
from database.handlers.users import Users
from database.handlers.statistics import Statistics
from database.handlers.goals import Goals
from database.handlers.quests import Quests
from database.handlers.shared_folders import SharedFolders
from database.handlers.shared_folder_sets import SharedFolderSets

class DatabaseAbstract(ABC):
    """Abstract class for the database"""

    @abstractmethod
    def __init__(self):
        # Redefined in classes implementing this abstract class
        self._db = None
        self._flashcard_set = None
        self._flashcards = None
        self._folders = None
        self._read_write_access = None
        self._users = None
        self._statistics = None
        self._goals = None
        self._quests = None
        self._shared_folders = None
        self._shared_folder_sets = None

    def _init_database_handlers(self):
        """Initialise the database handlers. This can't be placed in this abstract init class
        because the concrete implementations need to occur first to set self.db
        """
        self._flashcard_set = FlashcardSet(self.db)
        self._flashcards = Flashcards(self.db)
        self._folders = Folders(self.db)
        self._read_write_access = ReadWriteAccess(self.db)
        self._users = Users(self.db)
        self._statistics = Statistics(self.db)
        self._goals = Goals(self.db)
        self._quests = Quests(self.db)
        self._shared_folders = SharedFolders(self.db)
        self._shared_folder_sets = SharedFolderSets(self.db)

    @property
    def query(self):
        """Return the db element

        Returns:
            FirebaseDatabase | LocalDatabase: The value of db
        """
        return self._db

    @query.setter
    def db(self, value):
        self._db = value

    @property
    def flashcard_set(self):
        """Return the flashcard set class

        Returns:
            FlashcardSet: The flashcard set class
        """
        return self._flashcard_set

    @property
    def flashcards(self):
        """Return the flashcards class

        Returns:
            Flashcards: The flashcards class
        """
        return self._flashcards

    @property
    def folders(self):
        """Return the folders class

        Returns:
            Folders: The folders class
        """
        return self._folders

    @property
    def read_write_access(self):
        """Return the ReadWriteAccess class

        Returns:
            ReadWriteAccess: The ReadWriteAccess class
        """
        return self._read_write_access

    @property
    def users(self):
        """Return the Users class

        Returns:
            Users: The Users class
        """
        return self._users

    @property
    def statistics(self):
        """Return the Statistics class

        Returns:
            Statistics: The Statistics class
        """
        return self._statistics

    @property
    def goals(self):
        """Return the Goals class

        Returns:
            Goals: The Goals class
        """
        return self._goals
    
    @property
    def quests(self):
        """Return the Quests class

        Returns:
            Quests: The Quests class
        """
        return self._quests

    @property
    def shared_folders(self):
        """Return the SharedFolders class

        Returns:
            SharedFolders: The SharedFolders class
        """
        return self._shared_folders

    @property
    def shared_folder_sets(self):
        """Return the SharedFolderSets class

        Returns:
            SharedFolderSets: The SharedFolderSets class
        """
        return self._shared_folder_sets
    
    @abstractmethod
    def verify_id_token(self, id_token: str, user_id: str):
        """
        Verify if a given ID token generated by firebase Auth is correct, according to the user_id

        Args:
            id_token (str): The ID token
        """
