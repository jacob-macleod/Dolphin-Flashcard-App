openapi: 3.1.0
x-stoplight:
  id: 3nvqvn85214p1
info:
  title: DolphinFlashcardApp API
  version: '1.0'
  summary: Manage flashcards
  description: 'Set up user accounts, create or manage flashcards, set learning goals, and track performances with user''s heatmap and streak data. Data is available in JSON format only. <br></br>**Note**: All parameters are case-sensitive. Request body parameters are required, but the query parameters are optional. '
  contact:
    name: Dolphin Flashcards
    url: 'https://dolphinflashcards.com/contact'
    email: dolphinflashcards@outlook.com
  license:
    name: MIT
    url: 'https://github.com/jacob-macleod/Dolphin-Flashcard-App/blob/main/LICENSE'
servers:
  - url: 'http://dolphinflashcards.com/api'
    description: baseurl
paths:
  /create-account:
    post:
      summary: Create account
      tags:
        - Account
      responses:
        '200':
          description: Sign-in successful, returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: The generated JWT token for the user
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format...'
                properties:
                  error:
                    type: string
                    description: Describes the nature of the error and provides a possible solution.
                    example: 'Your supplied json keys do not match the expected format...'
      operationId: post-create-account
      x-stoplight:
        id: 7n7de91o3dz9d
      description: Create a new user account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  userID: user1
                  displayName: testAccount
                  rawAccessToken: test
                  accessToken: duh32*£dh
                  idToken: eu26bdj7s...
              required:
                - userID
                - displayName
                - rawAccessToken
                - accessToken
                - idToken
              properties:
                userID:
                  type: string
                  example: user1
                  description: A unique identifier to be assigned to the new user.
                displayName:
                  type: string
                  example: sampleName
                  description: A unique name or title for the new user.
                rawAccessToken:
                  type: string
                  example: test
                  description: The raw access token to use to authenticate the Alpha
                accessToken:
                  type: string
                  example: duh32*£dh
                  description: The hashed version of the rawAccessToken
                idToken:
                  type: string
                  example: eu26bdj7s...
                  description: The ID Token provided by firebase authentication
  /sign-in:
    post:
      summary: Sign in
      tags:
        - Account
      responses:
        '200':
          description: Sign-in successful, returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: The generated JWT token for the user
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''userID'': '''', ''rawAccessToken'': '''', ''accessToken'': '''', ''idToken'': ''''}'
                properties:
                  error:
                    type: string
                    description: Describes the nature of the error and provides a possible solution.
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''userID'': '''', ''rawAccessToken'': '''', ''accessToken'': '''', ''idToken'': ''''}'
        '403':
          description: Forbidden, user does not exist or token mismatch
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User ID does not match token."
        '500':
          description: Internal server error, JWT encoding failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "JWT encoding failed due to an unexpected error"
      operationId: post-sign-in
      x-stoplight:
        id: 7n7de91o3dz9d
      description: Create a new user account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  userID: user123
                  rawAccessToken: test
                  accessToken: duh32*£dh
                  idToken: eu26bdj7s...
              required:
                - userID
                - rawAccessToken
                - accessToken
                - idToken
              properties:
                userID:
                  type: string
                  example: user1
                  description: A unique identifier to be assigned to the new user.
                rawAccessToken:
                  type: string
                  example: test
                  description: The raw access token to use to authenticate the Alpha
                accessToken:
                  type: string
                  example: duh32*£dh
                  description: The hashed version of the rawAccessToken
                idToken:
                  type: string
                  example: eu26bdj7s...
                  description: The ID Token provided by firebase authentication
  /create-flashcard:
    post:
      summary: Create flashcard
      responses:
        '200':
          description: OK. Returned when the request is successfully executed.
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - success: true
                items:
                  type:
                    - object
                    - integer
                  properties:
                    '200':
                      type: integer
                      x-stoplight:
                        id: hvhaj9owg6b59
                      description: HTTP status code indicating a successful operation.
                    success:
                      type: boolean
                      description: Indicates that a new flashcard was created successfully.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''flashcardName'': '''', ''flashcardDescription'': '''', ''folder'': '''', ''cards'': [{''front'': '''', ''back'': '''', ''reviewStatus'': '''', ''lastReview'': ''''}]}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''flashcardName'': '''', ''flashcardDescription'': '''', ''folder'': '''', ''cards'': [{''front'': '''', ''back'': '''', ''reviewStatus'': '''', ''lastReview'': ''''}]}'
      operationId: create-flashcard
      x-stoplight:
        id: xhqqqo1sd3bqu
      description: 'Create or edit a flashcard set for a user. Flashcards contain front, back, review status, and last review date properties.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  flashcardName: Expense Tracker
                  flashcardDescription: A set of flashcards for tracking expenses
                  folder: folder-name/folder-2
                  cards:
                    - front: Monday
                      back: Evening
                      reviewStatus: '0.0'
                      lastReview: 13-07-2024
                    - front: Tuesday
                      back: Morning
                      reviewStatus: '0.0'
                      lastReview: 14-07-2024
                    - front: Wednesday
                      back: Afternoon
                      reviewStatus: '0.0'
                      lastReview: 15-07-2024
              required:
                - jwtToken
                - flashcardName
                - flashcardDescription
                - folder
                - cards
              properties:
                jwtToken:
                  type: string
                  description: The unique ID of the user editing or creating flashcards.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                flashcardName:
                  type: string
                  description: 'The name of the flashcard set. '
                  example: firstCard
                flashcardDescription:
                  type: string
                  description: The description of the flashcard set
                  example: my first flashcard
                folder:
                  type: string
                  description: 'The name of the folder containing the flashcard sets. Set to "" to set as a top level flashcard, otherwise set it to the parent folder name. If there are multiple parent folders, add the folder name seperated by numeric figures.'
                  example: top-level-parent-name/parent-name-2/parent-name-3
                cards:
                  type: array
                  description: 'A list of flashcards. Each flashcard object has `front`, `back`, `review status`, and `last review` properties.'
                  items:
                    type: object
                    properties:
                      front:
                        type: string
                        description: 'The front side content of the flashcard.'
                        example: Monday
                      back:
                        type: string
                        description: ' The back side content of the flashcard.'
                        example: Evening
                      reviewStatus:
                        type: string
                        description: The review status of the flashcard
                        example: '0.0'
                      lastReview:
                        type: string
                        description: 'The date when the flashcard was last reviewed, in dd/mm/yyyy format.'
                        example: 13/08/2024
        description: ''
      parameters: []
      tags:
        - Card management
  /create-folder:
    post:
      summary: Create Folder
      tags:
        - Card management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Folder firstFolder created
                properties:
                  success:
                    type: string
                    example: Folder "folderName" created
                    description: Indicates that the folder has been successfully created.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': ''''}'
                properties:
                  error:
                    type: string
                    description: Describes the nature of the error and provides a possible solution.
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': ''''}'
      operationId: post-create-folder
      x-stoplight:
        id: 1kcsx8hucsylb
      description: Create a folder for the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  folder: firstFolder
              required:
                - jwtToken
                - folder
              properties:
                jwtToken:
                  type: string
                  description: The unique identity of the user creating a folder.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                folder:
                  type: string
                  description: 'The name or title of the folder to be created. '
                  example: firstFolder
  /get-flashcard:
    get:
      summary: Get Flashcard
      tags:
        - Card management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    cards:
                      - '34491285524799755658107639929006996702748532692311513250222807523742322598240'
                    description: my first flashcard
                    name: firstCard
                properties:
                  cards:
                    type: array
                    description: 'The card ID, a unique numerical identifier of the exact flashcard retrieved from the folder.'
                    items:
                      type: string
                  description:
                    type: string
                    example: my first flashcard
                    description: 'The description of the flashcard. '
                  name:
                    type: string
                    example: firstCard
                    description: ' The name of the flashcard. '
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': '''', ''flashcardName'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': '''', ''flashcardName'': ''''}'
                    description: 'Describes the nature of the error and provides a possible solution.  '
      operationId: get-get-flashcard
      x-stoplight:
        id: un39klju80sc5
      description: 'Retrieve a flashcard set based on the specified name, folder, and user ID. Returns null if the request body contains an invalid flashcard name and/or folder name'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  folder: firstFolder
                  flashcardName: My new set
              required:
                - jwtToken
                - folder
                - flashcardName
              properties:
                jwtToken:
                  type: string
                  description: The unique identifier of the user who owns the flashcard.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                folder:
                  type: string
                  description: The name of the folder containing the flashcard.
                  example: firstFolder
                flashcardName:
                  type: string
                  description: The name or title of the flashcard to retrieve.
                  example: firstCard
    post:
      summary: Get Flashcard
      tags:
        - Card management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    cards:
                      - '34491285524799755658107639929006996702748532692311513250222807523742322598240'
                    description: my first flashcard
                    name: firstCard
                properties:
                  cards:
                    type: array
                    description: 'The card ID, a unique numerical identifier of the exact flashcard retrieved from the folder.'
                    items:
                      type: string
                  description:
                    type: string
                    example: my first flashcard
                    description: 'The description of the flashcard. '
                  name:
                    type: string
                    example: firstCard
                    description: 'The name of the flashcard.    '
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': '''', ''flashcardName'': ''''}'
                properties:
                  error:
                    type: string
                    description: 'Describes the nature of the error and provides a possible solution.  '
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''folder'': '''', ''flashcardName'': ''''}'
      operationId: post-get-flashcard
      x-stoplight:
        id: 0g9zs158608yt
      description: 'Retrieve a flashcard set based on the specified name, folder, and user ID. Returns null if the request body contains an invalid flashcard name and/or folder name.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  folder: firstFolder
                  flashcardName: firstCard
              required:
                - jwtToken
                - folder
                - flashcardName
              properties:
                jwtToken:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  description: 'The unique identifier of the user who owns the flashcard. '
                folder:
                  type: string
                  example: firstFolder
                  description: ' The name of the folder containing the flashcard. '
                flashcardName:
                  type: string
                  example: firstCard
                  description: The name or title of the flashcard to retrieve.
  /get-flashcard-item:
    get:
      summary: Get Flashcard Item
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    back: Evening
                    front: Monday
                properties:
                  back:
                    type: string
                    example: Evening
                    description: 'The back side content of the flashcard. '
                  front:
                    type: string
                    example: Monday
                    description: The front side content of the flashcard.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''cardID'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''cardID'': ''''}'
                    description: 'Describes the nature of the error and provides a possible solution. '
      operationId: get-get-flashcard-item
      x-stoplight:
        id: 0l2f7242pkl9c
      description: 'Get a flashcard item based on the card ID. Flashcard sets store multiple flashcard items, which are the individual flashcards.'
      tags:
        - Card management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  cardID: '34491212345799755658107639929006996702748532692311513250209090523742322511111'
              required:
                - cardID
              properties:
                cardID:
                  type: string
                  description: ' A unique numerical identifier of the specific card to be retrieved from the flashcard set.'
                  example: '34491212345799755658107639929006996702748532692311513250209090523742322511111'
    post:
      summary: Get Flashcard Item
      tags:
        - Card management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    back: Evening
                    front: Monday
                properties:
                  back:
                    type: string
                    description: The back side content of the flashcard.
                    example: Evening
                  front:
                    type: string
                    description: 'The front side content of the flashcard. '
                    example: Monday
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''cardID'': ''''}'
                properties:
                  error:
                    type: string
                    description: ' Describes the nature of the error and provides a possible solution.      '
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''cardID'': '' ''}'
      operationId: post-get-flashcard-item
      x-stoplight:
        id: gyf4io0ai9fsp
      description: 'Get a flashcard item based on the card ID. Flashcard sets store multiple flashcard items, which are the individual flashcards.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  cardID: '34491212345799755658107639929006996702748532692311513250209090523742322511111'
              required:
                - cardID
              properties:
                cardID:
                  type: string
                  example: '34491212345799755658107639929006996702748532692311513250209090523742322511111'
                  description: The unique numerical identifier of the specific card being retrieved from the flashcard set.
  /get-today-cards:
    post:
      summary: Get Today Cards
      tags:
        - Card management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    My first folder:
                      firstFlashcard:
                        cards:
                          cardID:
                            last_review: 15/07/2024
                            review_status: '0.0'
                        flashcardID: '6796878844471389968582206160161573797336081897254331165973477783999823937257'
                        flashcardName: firstCard
                      secondFlashcard:
                        cards:
                          cardID:
                            last_review: 15/07/2024
                            review_status: '0.0'
                        flashcardID: '6796878844471389968582206160161573797336081897254331165973477783999823937257'
                        flashcardName: secondCard
                    top-level-parent-name:
                      parent-name-2:
                        parent-name-3:
                          flashcardName:
                            cards:
                              '37117561297934638728634279553695852046447234529246203144425130738760147640868':
                                last_review: 15/07/2024
                                review_status: '0.0'
                            flashcardID: '6796878844881389968582206160161573797336081897254331165973477783999823937257'
                            flashcardName: firstCard
                properties:
                  Folder:
                    type: object
                    description: A parent folder containing flashcards.
                    x-stoplight:
                      id: um95m67gjv212
                    properties:
                      Flashcard:
                        type: object
                        description: The first flashcard in the current folder.
                        x-stoplight:
                          id: jsd3nnvetoy6z
                        properties:
                          cards:
                            type: object
                            description: An object contaning the `cardID` of the current flashcard.
                            properties:
                              cardID:
                                type: object
                                description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                properties:
                                  last_review:
                                    type: string
                                    description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                    example: 15/07/2024
                                  review_status:
                                    type: string
                                    description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned.'
                                    example: '0.0'
                          flashcardID:
                            type: string
                            description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                            example: '6796878844471389968582206160161573797336081811111331165973477783999823937257'
                          flashcardName:
                            type: string
                            description: 'The name of the current flashcard.  '
                            example: firstFlashCard
                      secondFlashcard:
                        type: object
                        description: Another flashcard within the current folder.
                        properties:
                          cards:
                            type: object
                            description: An object contaning the `cardID` of the current flashcard.
                            properties:
                              cardID:
                                type: object
                                description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                properties:
                                  last_review:
                                    type: string
                                    description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                    example: 15/07/2024
                                  review_status:
                                    type: string
                                    description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned.'
                                    example: '0.0'
                          flashcardID:
                            type: string
                            description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                          flashcardName:
                            type: string
                            description: 'The name of the current flashcard.  '
                            example: secondFlashCard
                  top-level-parent-name:
                    type: object
                    description: Another parent folder within the same account that contains nested folders and flashcards. It has a different naming convention from the previous folder.
                    properties:
                      parent-name-2:
                        type: object
                        description: A folder nested within the `top-level-parent-name` folder that further organizes flashcards.
                        properties:
                          parent-name-3:
                            type: object
                            description: 'A folder nested within the `parent-name-2 folder`, containing specific flashcards.'
                            properties:
                              Flashcard:
                                type: object
                                x-stoplight:
                                  id: 49dbpydk4jkdi
                                description: The first flashcard in the current folder.
                                properties:
                                  cards:
                                    type: object
                                    description: An object contaning the `cardID` of the current flashcard.
                                    properties:
                                      cardID:
                                        type: object
                                        x-stoplight:
                                          id: 7spigejsdhd9s
                                        description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                        properties:
                                          last_review:
                                            type: string
                                            description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                          review_status:
                                            type: string
                                            description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned.'
                                  flashcardID:
                                    type: string
                                    description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                                  flashcardName:
                                    type: string
                                    description: 'The name of the current flashcard.  '
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''string''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' ''}'
                    description: Describes the nature of the error and provides a possible solution.
              examples:
                Example 1:
                  value:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''string''}'
      operationId: get-get-today-cards
      x-stoplight:
        id: 144ypjxh6u3n4
      description: 'Get all the flashcards to be learned today for a user. If a card''s review status is `0.0`, it is not started; if it is `0.x`, it is actively studying; if it is >= `1.x`, it is learned.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  x-stoplight:
                    id: x9opv12liwlhi
                  description: 'The identity of the user learning the flashcards. '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
        description: ''
  /get-all-cards:
    post:
      summary: Get All Cards
      tags:
        - Card management
      responses:
        '200':
          description: 'OK. Returns the string: `"User has no flashcards"` when supplied an invalid jwtToken.'
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    My first folder:
                      firstFlashcard:
                        cards:
                          cardID:
                            last_review: 15/07/2024
                            review_status: '0.0'
                        flashcardID: '6796878844471389968582206160161573797336081897254331165973477783999823937257'
                        flashcardName: firstCard
                      secondFlashcard:
                        cards:
                          cardID:
                            last_review: 15/07/2024
                            review_status: '0.0'
                        flashcardID: '6796878844471389968582206160161573797336081897254331165973477783999823937257'
                        flashcardName: secondCard
                    My second folder: {}
                    My third folder: {}
                    top-level-parent-name:
                      parent-name-2:
                        parent-name-3:
                          flashcardName:
                            cards:
                              '37117561297934638728634279553695852046447234529246203144425130738760147640868':
                                last_review: 15/07/2024
                                review_status: '0.0'
                            flashcardID: '6796878844881389968582206160161573797336081897254331165973477783999823937257'
                            flashcardName: firstCard
                properties:
                  Folder:
                    type: object
                    x-stoplight:
                      id: uxvyik4azlzci
                    description: A parent folder containing flashcards.
                    properties:
                      Flashcard:
                        type: object
                        x-stoplight:
                          id: c8dkih2tdp5wa
                        description: 'The first flashcard in the current folder.   '
                        properties:
                          cards:
                            type: object
                            description: An object contaning the `cardID` of the current flashcard.
                            properties:
                              cardID:
                                type: object
                                description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                properties:
                                  last_review:
                                    type: string
                                    description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                  review_status:
                                    type: string
                                    description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned. '
                          flashcardID:
                            type: string
                            description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                          flashcardName:
                            type: string
                            description: The name of the current flashcard.
                      secondFlashcard:
                        type: object
                        description: 'The second flashcard in the current folder.   '
                        properties:
                          cards:
                            type: object
                            description: An object contaning the `cardID` of the current flashcard.
                            properties:
                              cardID:
                                type: object
                                description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                properties:
                                  last_review:
                                    type: string
                                    description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                  review_status:
                                    type: string
                                    description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned. '
                          flashcardID:
                            type: string
                            description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                          flashcardName:
                            type: string
                            description: The name of the current flashcard.
                  top-level-parent-name:
                    type: object
                    description: Another parent folder within the same account that contains nested folders and flashcards. It has a different naming convention from the previous folder.
                    properties:
                      parent-name-2:
                        type: object
                        description: A folder nested within the `top-level-parent-name` folder that further organizes flashcards.
                        properties:
                          parent-name-3:
                            type: object
                            description: 'A folder nested within the `parent-name-2` folder, containing specific flashcards.'
                            properties:
                              Flashcard:
                                type: object
                                x-stoplight:
                                  id: leubcg0y6tohu
                                description: 'The first flashcard in the current folder.   '
                                properties:
                                  cards:
                                    type: object
                                    description: An object contaning the `cardID` of the current flashcard.
                                    properties:
                                      cardID:
                                        type: object
                                        description: A unique numerical identifier of a specific card item within the flashcard. Has `last_review` and `review_status` properties.
                                        x-stoplight:
                                          id: vtzd3ybisgqvr
                                        properties:
                                          last_review:
                                            type: string
                                            description: 'The date when the card was last reviewed, formatted as dd/mm/yyyy. '
                                          review_status:
                                            type: string
                                            description: 'The current review status of the card, where `0.0` indicates that the card is not started; `0.x` indicates that the card is actively studying; and >= `1.x` indicates that the card is learned. '
                                  flashcardID:
                                    type: string
                                    description: A unique numerical identifier of the current flashcard. This is different from `cardID`.
                                  flashcardName:
                                    type: string
                                    description: The name of the current flashcard.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''''
                    description: Describes the nature of the error and provides a possible solution.
      operationId: post-get-all-cards
      x-stoplight:
        id: 6fceyn25gp85g
      description: Get all the flashcards created by a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  description: Identifies the user who wants to retrieve their flashcards.
  /move-flashcard-set:
    post:
      summary: Move Flashcard Set
      tags:
        - Card management
      responses:
        '200':
          description: 'OK. Returns the string: `"Flashcard not found in current location"` when supplied an invalid folder path.'
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: The flashcard set at /users/user700430/flashcards/top-level-parent-name/parent-name-2/parent-name-3/flashcardName/6796878844881389968582206160161573797336081897254331165973477783999823937257 has been moved to My third folder
                properties:
                  success:
                    type: string
                    example: The flashcard set at /users/user700430/flashcards/top-level-parent-name/parent-name-2/parent-name-3/flashcardName/6796878844881389968582206160161573797336081897254331165973477783999823937257 has been moved to My third folder
                    description: Indicates that the flashcard set at the specified path has been successfully moved to a new folder.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''currentLocation'': '''', ''flashcardID'': '''', ''moveLocation'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''currentLocation'': '''', ''flashcardID'': '''', ''moveLocation'': ''''}'
                    description: 'Describes the nature of the error and provides a possible solution. '
      operationId: post-move-flashcard-set
      x-stoplight:
        id: o2sks9y2lv56j
      description: Move a flashcard set to a new location. Folder locations, such as `currentLocation` or `moveLocation`, are in the format `myfolder1/myfolder2`. If the card is in the root folder, the folder path should be an empty string `""`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  currentLocation: top-level-parent-name/parent-name-2
                  flashcardID: '6796878844881'
                  moveLocation: My-third-folder
              required:
                - jwtToken
                - currentLocation
                - flashcardID
                - moveLocation
              properties:
                jwtToken:
                  type: string
                  description: 'The identity of the user moving their flashcard set to a new location. '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                currentLocation:
                  type: string
                  description: 'The current folder path. '
                  example: My-first-folder
                flashcardID:
                  type: string
                  description: A unique numerical identifier of the flashcard. This is different from `cardID`.
                  example: '22456683691481111127441553357143855166282726011111761972795191711430217049598'
                moveLocation:
                  type: string
                  description: 'The destination folder path. '
                  example: My-third-folder
  /create-xp-goal:
    post:
      summary: Create XP Goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Goal created successfully
                properties:
                  success:
                    type: string
                    example: Goal created successfully
                    description: Provides additional information confirming that the request was successful.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format:  {''jwtToken'': ''string'', ''goalXP'': ''number'', ''endDate'': ''sample-date''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' '', ''goalXP'': '' '', ''endDate'': '' ''}'
                    description: 'Describes the nature of the error and provides a possible solution. '
              examples:
                Example 1:
                  value:
                    error: Your supplied json keys do not match the expected format.
      operationId: post-create-xp-goal
      x-stoplight:
        id: 9wibu13wmmqj7
      description: 'Create an experience points (XP) goal for the user. XP goals have an `ID`, `type`, `title`, `end date`, `status` (failed, completed, or in progress), `fail date` (if failed), and `data storing` (start date, starting XP, desired XP) properties.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: '123'
                  goalXP: '100'
                  endDate: 30/07/2024
              required:
                - jwtToken
                - goalXP
                - endDate
              properties:
                jwtToken:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  description: Identifies the user who is creating an XP goal.
                goalXP:
                  type: string
                  example: '100'
                  description: The desired amount of experience points (XP) the user aims to achieve with this goal.
                endDate:
                  type: string
                  example: 30/07/2024
                  description: 'The date by which the user intends to achieve the XP goal, in dd/mm/yyyy format.'
            examples:
              Example 1:
                value:
                  jwtToken: '123'
                  goalXP: '100'
                  endDate: 30/07/2024
      tags:
        - Goal
    servers:
      - url: 'http://dolphinflashcards.com/api'
        description: create-xp
  /create-card-goal:
    post:
      summary: Create Card Goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Goal created successfully
                properties:
                  success:
                    type: string
                    description: ' Provides additional information confirming that the request was successful.'
                    example: Goal created successfully
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''cardsToRevise'': '''', ''endDate'': ''''}'
                properties:
                  error:
                    type: string
                    description: ' Describes the nature of the error and provides a possible solution.   '
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' '', ''cardsToRevise'': '' '', ''endDate'': '' ''}'
      operationId: post-create-card-goal
      x-stoplight:
        id: 35ujdrtoyfzr9
      description: "Create a card goal for the user. Card goals have the following properties: `ID`, `type` (XP), `title`, `end date`, `status` (failed, completed, or in progress), `fail date` (if failed), and `data storing` (cards revised so far, starting XP, desired cards to revise). A card goal is similar to an XP goal but differs in the data section.\r\n\r\n"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  cardsToRevise: '4'
                  endDate: 30/07/2024
              required:
                - jwtToken
                - cardsToRevise
                - endDate
              properties:
                jwtToken:
                  type: string
                  description: Identifies the user who is creating a card goal.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                cardsToRevise:
                  type: string
                  description: The number of cards the user intends to revise for the current goal.
                  example: '5'
                endDate:
                  type: string
                  description: "The date by which the user intends to achieve the card revision goal, in dd/mm/yyyy format.\t"
                  example: 30/07/2024
      tags:
        - Goal
    servers:
      - url: 'http://dolphinflashcards.com/api'
        description: ''
  /update-goal-status:
    post:
      summary: Update Goal Status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    '27730416841422320452490899630401426960300250535420717368523585221911685508588':
                      data:
                        cards_revised_so_far: '0'
                        cards_to_revise: '4'
                      end_date: 30/07/2024
                      fail_date: ''
                      status: in progress
                      title: Revise 4 cards by 07/07/2024
                      type: Card
                    '46882192866017507647804408894345572659406282731228567391554804537877046919642':
                      data:
                        goal_xp: '60'
                        start_date: 15/07/2024
                        starting_xp: '0'
                      end_date: 30/07/2024
                      fail_date: ''
                      status: in progress
                      title: Gain 60 XP by 30/07/2024
                      type: XP
                properties:
                  goalID-1:
                    type: object
                    x-stoplight:
                      id: vp5tii3oejq4d
                    description: 'A unique identifier or key associated with each goal. '
                    properties:
                      data:
                        type: object
                        description: ' An object containing goal-specific metrics, such as `goal_xp`, `start_date`, and `starting_xp` for XP goals or `cards_to_revise` and `cards_revised_so_far` for card goals '
                        properties:
                          cards_revised_so_far:
                            type: string
                            description: 'Associated with card goals, this indicates the number of cards revised so far.'
                            example: '0'
                          cards_to_revise:
                            type: string
                            description: 'Associated with card goals, this specifies the total number of cards to be revised.'
                            example: '4'
                      end_date:
                        type: string
                        example: 30/07/2024
                        description: 'The date by which the current goal must end, in dd/mm/yyyy format.'
                      fail_date:
                        type: string
                        example: '" "'
                        description: 'The date on which the goal''s status changed to ''failed''. This field is only populated if the goal fails; otherwise, it is an empty string.'
                      status:
                        type: string
                        example: in progress
                        description: 'The current status of a goal, which can be either `completed`, `in progress`, or `failed`.'
                      title:
                        type: string
                        example: Revise 4 cards by 15/07/2024
                        description: 'The name assigned to a goal. '
                      type:
                        type: string
                        example: Card
                        description: ' The nature of a goal. Goals can either be of type `Card` or `XP`. '
                  goalID-2:
                    type: object
                    x-stoplight:
                      id: 4f9jwlnkfq031
                    description: 'A unique identifier or key associated with each goal. '
                    properties:
                      data:
                        type: object
                        description: ' An object containing goal-specific metrics, such as `goal_xp`, `start_date`, and `starting_xp` for XP goals or `cards_to_revise` and `cards_revised_so_far` for card goals '
                        properties:
                          goal_xp:
                            type: string
                            description: 'Associated with XP goals, this specifies the target amount of experience points (XP) the user aims to achieve.'
                            example: '60'
                          start_date:
                            type: string
                            description: ' Associated with XP goals, this indicates the date when the XP goal began. '
                            example: 15/07/2024
                          starting_xp:
                            type: string
                            description: 'Associated with XP goals, this indicates the initial amount of experience points (XP) at the beginning of the goal.'
                            example: '0'
                      end_date:
                        type: string
                        description: 'The date by which the current goal must end, in dd/mm/yyyy format.'
                        example: 30/07/2024
                      fail_date:
                        type: string
                        description: 'The date on which the goal''s status changed to ''failed''. This field is only populated if the goal fails; otherwise, it is an empty string.'
                        example: ' " "'
                      status:
                        type: string
                        description: 'The current status of a goal, which can be either `completed`, `in progress`, or `failed`.'
                        example: in progress
                      title:
                        type: string
                        description: 'The name assigned to a goal. '
                        example: Gain 60 XP by 30/07/2024
                      type:
                        type: string
                        description: ' The nature of a goal. Goals can either be of type `Card` or `XP`. '
                        example: XP
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''string''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' ''} '
                    description: Describes the nature of the error and provides a possible solution.
      operationId: post-update-goal-status
      x-stoplight:
        id: hmtbfg51sa572
      description: 'Update the status of a goal. The possible values for the status of a goal are `completed`, `in progress`, or `failed`. Returns an empty object when the jwtToken provided is invalid.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  x-stoplight:
                    id: z79bhm434n5vx
                  description: An identifier for the user who is updating the goal status.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
      tags:
        - Goal
  /edit-card-goal:
    post:
      summary: Edit Card Goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Goal updated successfully
                properties:
                  success:
                    type: string
                    example: Goal updated successfully
                    description: Provides additional information confirming that the request was successful.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''goalID'': '''', ''newEndDate'': '''', ''newTitle'': '''', ''newCardsToRevise'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' '', ''goalID'': '' '', ''newEndDate'': '''', ''newTitle'': '' '', ''newCardsToRevise'': '' ''}'
                    description: Describes the nature of the error and provides a possible solution.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: Goal not found
                properties:
                  error:
                    type: string
                    example: Goal not found
                    description: Describes the nature of the error.
      operationId: post-edit-card-goal
      x-stoplight:
        id: 572gxxxvksi4z
      description: Edit an existing card goal for the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  goalID: '58748748168480479028433924465493243860761911102946223297681236368808083325563'
                  newEndDate: 30/07/2024
                  newTitle: Updated Goal
                  newCardsToRevise: 8
              required:
                - jwtToken
                - goalID
                - newEndDate
                - newTitle
                - newCardsToRevise
              properties:
                jwtToken:
                  type: string
                  description: 'Stores the user who is editing their card goal.  '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                goalID:
                  type: string
                  description: A unique identifier or key associated with the card goal being edited.
                  example: '11110748168480479028433924465493243860761911102946223297681236368808083322222'
                newEndDate:
                  type: string
                  description: 'The new end date for the card goal, in `dd/mm/yyyy` format. '
                  example: 30/07/2024
                newTitle:
                  type: string
                  description: The new title assigned to the card goal.
                  example: Updated Goal
                newCardsToRevise:
                  type: string
                  description: 'Specifies the updated number of cards the user intends to revise for this goal. '
                  example: '4'
            examples:
              Example 1:
                value:
                  jwtToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp'
                  goalID: goal1
                  newEndDate: 30/07/2024
                  newTitle: title1
                  newCardsToRevise: '4'
      tags:
        - Goal
  /edit-xp-goal:
    post:
      summary: Edit XP Goal
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Goal updated successfully
                properties:
                  success:
                    type: string
                    example: Goal updated successfully
                    description: Provides additional information confirming that the request was successful.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''goalID'': '''', ''newEndDate'': ''^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\\d{4}$'', ''newTitle'': '''', ''newGoalXP'': ''^\\d+$''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' '', ''goalID'': '' '', ''newEndDate'': '' '', ''newTitle'': '' '', ''newGoalXP'': '' ''}'
                    description: 'Describes the nature of the error and provides a possible solution. '
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: Goal not found
                properties:
                  error:
                    type: string
                    example: Goal not found
                    description: 'Describes the nature of the error. '
      operationId: post-edit-xp-goal
      x-stoplight:
        id: o6rdyybbanhpy
      description: Edit an existing experience points (XP) goal for the user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  goalID: '46882192866017507647804408894345572659406282731228567391554804537877046919642'
                  newEndDate: 15/07/2024
                  newTitle: Updated Title for XP Goal
                  newGoalXP: '80'
              required:
                - jwtToken
                - goalID
                - newEndDate
                - newTitle
                - newGoalXP
              properties:
                jwtToken:
                  type: string
                  description: 'Identifies the user who is editing their XP goal.    '
                goalID:
                  type: string
                  description: A unique identifier or key associated with the XP goal being edited.
                  example: '55335192866017507647804408894345572659406282731228567391554804537877046919111'
                newEndDate:
                  type: string
                  description: ' The new end date for the XP goal, formatted as `dd/mm/yyyy`. '
                  example: 15/07/2024
                newTitle:
                  type: string
                  example: Updated Title for XP Goal
                  description: 'The new title assigned to the XP goal. '
                newGoalXP:
                  type: string
                  example: '80'
                  description: The new desired amount of experience points (XP) the user intends to achieve with this goal.
            examples:
              Example 1:
                value:
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  goalID: goal1
                  newEndDate: 15/07/2024
                  newTitle: title1
                  newGoalXP: '40'
      tags:
        - Goal
  /delete-goal:
    delete:
      summary: Delete Goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    success: Goal deleted successfully
                properties:
                  success:
                    type: string
                    example: Goal deleted successfully
                    description: Provides additional information confirming that the request was successful.
        '400':
          description: A bad request error. Returned when the request body parameters are not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '''', ''goalID'': ''''}'
                properties:
                  error:
                    type: string
                    description: 'Describes the nature of the error and provides a possible solution. '
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' '', ''goalID'': '' ''}'
      operationId: delete-delete-goal
      x-stoplight:
        id: nbiozq3qumve3
      description: Delete a user's goal.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp'
                  goalID: goal1
              required:
                - jwtToken
                - goalID
              properties:
                jwtToken:
                  type: string
                  description: 'Identifies the user deleting a goal. '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                goalID:
                  type: string
                  description: A unique identifier or key associated with the goal being deleted.
                  example: goal1
      tags:
        - Goal
  /update-heatmap:
    post:
      summary: Update Heat map
      tags:
        - Statistics
      responses:
        '200':
          description: OK. Returns an object that contains dates (formatted as `dd/mm/yyyy`) as keys and the corresponding streak counts as values.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    15-07-2024: '2'
                    16-07-2024: '2'
                properties:
                  date:
                    type: string
                    x-stoplight:
                      id: cszxyu7bml0lm
                    example: '2'
                    description: A key-value pair of dates (formatted as `dd-mm-yyyy`) and the user's streak count for that date.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''''}'
                    description: Provides more details about the error.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: User does not exist!
                properties:
                  error:
                    type: string
                    description: Provides details about the nature of the error.
                    example: User does not exist!
      operationId: post-update-heatmap
      x-stoplight:
        id: ivvmwdhypjh09
      description: Updates the user's heatmap data when their streak is modified.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp: '123'
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  x-stoplight:
                    id: ldvlxqacihq5n
                  description: 'Identifies the user with an updated heatmap data. '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
  /get-heatmap:
    post:
      summary: Get Heatmap
      tags:
        - Statistics
      responses:
        '200':
          description: OK. Returns an object that contains dates (formatted as `dd/mm/yyyy`) as keys and the corresponding streak counts as values.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    15-07-2024: '2'
                properties:
                  16-07-2024:
                    type: string
                    example: '2'
                    description: A key-value pair of dates (formatted as `dd-mm-yyyy`) and the user's streak count for that date.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''''}'
                properties:
                  error:
                    type: string
                    description: 'Describes the nature of the error and provides a possible solution. '
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' ''}'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: User does not exist!
                properties:
                  error:
                    type: string
                    description: Provides details about the nature of the error.
                    example: User does not exist!
      operationId: post-get-heatmap
      x-stoplight:
        id: lfd15jsr1adjg
      description: Retrieve the user's heatmap data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  jwtToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp'
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  description: 'Identifies the user whose heatmap data is being retrieved. '
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
  /calculate-streak:
    post:
      summary: Calculate Streak
      tags:
        - Statistics
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - streak: 0
                items:
                  type:
                    - object
                    - integer
                  properties:
                    '200':
                      type: integer
                      x-stoplight:
                        id: rrojbzk2fmv0x
                      description: HTTP status code indicating a successful operation.
                    streak:
                      type: string
                      example: '1'
                      description: Specifies the user's calculated streak.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': ''''}'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format: {''jwtToken'': '' ''}'
                    description: Describes the nature of the error and provides a possible solution.
        '500':
          description: 'Internal server error. '
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: '''NoneType'' object is not subscriptable'
                properties:
                  error:
                    type: string
                    description: Describes the nature of the error and provides a possible reason.
                    example: User does not exist.
      operationId: post-calculate-streak
      x-stoplight:
        id: ma1gh4uftumtw
      description: 'Calculate the user''s streak, and increase it if necessary.'
      parameters:
        - schema:
            type: boolean
          in: query
          name: increase
          description: 'Can be added to the query string to increase a user''s streak. If needed, set `increase = true`'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - jwtToken
              properties:
                jwtToken:
                  type: string
                  x-stoplight:
                    id: ulxhv08jir4pf
                  description: The unique identifier of the user to calculate the streak for.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
            examples:
              Example 1:
                value:
                  jwtToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp'
  /search:
    post:
      summary: Search
      tags:
        - Card Management
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - streak: 0
                items:
                  type:
                    - object
                    - integer
                  properties:
                    '200':
                      type: integer
                      x-stoplight:
                        id: rrojbzk2fmv0x
                      description: HTTP status code indicating a successful operation.
                    streak:
                      type: array
                      example: [{"name": "Flashcard1", "id": "1"}]
                      description: Specifies the user's calculated streak.
        '400':
          description: A bad request error. Returned when the request body parameter is not in the expected JSON format.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Your supplied json keys do not match the expected format. The request should be in the format...'
                properties:
                  error:
                    type: string
                    example: 'Your supplied json keys do not match the expected format. The request should be in the format...'
                    description: Describes the nature of the error and provides a possible solution.
        '500':
          description: 'Internal server error. '
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: '(Error Message)'
                properties:
                  error:
                    type: string
                    description: Describes the nature of the error and provides a possible reason.
                    example: User does not exist.
      operationId: post-search
      description: 'Search for a flashcard by it''s title. The flashcard could be owned by any user'
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: 'The name of the flashcard to search for'
  /import-flashcards:
    post:
      summary: Import Flashcard
      responses:
        '200':
          description: OK. Returned when the request is successfully executed.
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - success: true
                items:
                  type:
                    - object
                    - integer
                  properties:
                    '200':
                      type: integer
                      x-stoplight:
                        id: hvhaj9owg6b59
                      description: HTTP status code indicating a successful operation.
                    success:
                      type: boolean
                      description: Indicates that a new flashcard was created successfully.
        '400':
          description: A bad request error. Returned when a flashcard set with the same name already exists.
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    error: 'Flashcard set name already exists'
                properties:
                  error:
                    type: string
                    example: 'Flashcard set name already exists'
      operationId: import-flashcard
      description: 'Import flashcards from a CSV file. The API accepts CSV files and creates flashcards under the specified folder.'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              x-examples:
                Example 1:
                  file: Sample.csv
                  jwtToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                  flashcardName: Expense Tracker
                  flashcardDescription: A set of flashcards for tracking expenses
                  folder: folder-name/folder-2
                  delimiter: ','
                  firstRowOfData: 2
              required:
                - file
                - jwtToken
                - flashcardName
                - flashcardDescription
                - folder
                - delimiter
                - firstRowOfData
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file having headings term and definition.
                jwtToken:
                  type: string
                  description: The unique ID of the user editing or creating flashcards.
                  example: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImEzMmZkZDRiMTQ2Njc3NzE5YWIyMzcyODYxYmRlZDg5In0.eyJpc3MiOiJodHRwOi8vZG9scGhpbmZsYXNoY2FyZHMuY29tIiwiYXVkIjoiYXBpIiwic3ViIjoidU5RR2lIencxdk9EaExybTVDRWtaQ1ZoTU93MSIsImFjY2Vzc190b2tlbiI6IjRiZTA2NDNmLTFkOTgtNTczYi05N2NkLWNhOThhNjUzNDdkZCIsImFjY2Vzc190b2tlbl9yYXciOiJ0ZXN0IiwiaWF0IjoxNzI2Nzc0MTYzfQ.F-fxFitPQF-gGHyhGPGxE_zj_b8XJybqe4J_iYG66BC4Dqm4LTb8RpcDLyYUhRCcpphihpWGbdp
                flashcardName:
                  type: string
                  description: 'The name of the flashcard set. '
                  example: firstCard
                flashcardDescription:
                  type: string
                  description: The description of the flashcard set
                  example: my first flashcard
                folder:
                  type: string
                  description: 'The name of the folder containing the flashcard sets. Set to "" to set as a top level flashcard, otherwise set it to the parent folder name. If there are multiple parent folders, add the folder name seperated by numeric figures.'
                  example: top-level-parent-name/parent-name-2/parent-name-3
                delimiter:
                  type: string
                  description: 'The delimiter used in the CSV file (e.g., comma, semicolon).'
                  example: ','
                firstRowOfData:
                  type: string
                  description: 'Defines the first row where actual data is stored in the CSV. Defaults to row 2 if not provided.'
                  example: '2'
      parameters: []
      tags:
        - Card management

components:
  schemas: {}
  securitySchemes:
    apiKey_1:
      name: apiKey
      type: apiKey
      in: query
  requestBodies: {}
tags:
  - name: Account
    description: Groups the endpoints required to create an account.
  - name: Card management
    description: Groups the endpoints required to create and manage flashcards.
  - name: Goal
    description: Groups the endpoints required to create and manage goals.
  - name: Statistics
    description: Groups the endpoints required to track heatmap and streak.
